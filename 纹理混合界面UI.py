# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '纹理混合界面UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap,QImage
from PIL import Image, ImageQt
import os
import io
import pyperclip


#_________________________全局参数_____________________________________________________
x=0
"""全局 Qpixmap 变量"""
Fin_img_R = QPixmap
Fin_img_G = QPixmap
Fin_img_B = QPixmap
Fin_img_A = QPixmap
Final_Image = Image
"""全局通道准备 RGBA算是通道准备 当对应通道装填后 为True"""
R_Ready = False
G_Ready = False
B_Ready = False
A_Ready = False

"""全局变量 分辨率 格式 名称 路径"""
Final_Image_Resolution =  0
Final_Image_ResolutionX = 0     #最终输出分辨率X
Final_Image_ResolutionY = 0     #最终输出分辨率Y
Image_Resolution =  1024


Final_Image_Format = "NULL"     #输出图片格式
Final_Image_Mode = "NULL"       #输出图片的模式
Final_Image_Name = ""           #输出图片的名称
Final_Image_Path = ""           #输出图片的路径
"""全局变量 LOG信息"""
LOG = ""
LOG_Opacity = 1                 #LOG的透明度

File_Path =""
#_________________________全局参数_____________________________________________________
class NewCheckBox(QtWidgets.QCheckBox):
        def OpenPathCheck(self,pathName,checkbox1,checkbox2,checkbox3,checkbox4):
                global Final_Image_Path
                if pathName == "path01" and checkbox1.isChecked():
                        checkbox2.setChecked(False)
                        checkbox3.setChecked(False)
                        checkbox4.setChecked(False)
                        print("开启_使用PATH01")
                elif pathName == "path02" and checkbox2.isChecked():
                        checkbox1.setChecked(False)
                        checkbox3.setChecked(False)
                        checkbox4.setChecked(False)
                        print("开启_使用PATH02")
                elif pathName == "path03" and checkbox3.isChecked():
                        checkbox1.setChecked(False)
                        checkbox2.setChecked(False)
                        checkbox4.setChecked(False)
                        print("开启_使用PATH03")
                elif pathName == "path04" and checkbox4.isChecked():
                        checkbox1.setChecked(False)
                        checkbox2.setChecked(False)
                        checkbox3.setChecked(False)
                        print("开启_使用PATH04")
        def OpenFormatCheck(self,pathName,checkbox1,checkbox2,checkbox3,checkbox4):
                global Final_Image_Format
                if pathName == "JPGE" and checkbox1.isChecked():
                        checkbox2.setChecked(False)
                        checkbox3.setChecked(False)
                        checkbox4.setChecked(False)
                        print("开启_导出JPGE格式")
                        Final_Image_Format = "jpg"
                elif pathName == "TGA" and checkbox2.isChecked():
                        checkbox1.setChecked(False)
                        checkbox3.setChecked(False)
                        checkbox4.setChecked(False)
                        print("开启_导出TGA格式")
                        Final_Image_Format = "tga"
                elif pathName == "PNG" and checkbox3.isChecked():
                        checkbox1.setChecked(False)
                        checkbox2.setChecked(False)
                        checkbox4.setChecked(False)
                        print("开启_导出PNG格式")
                        Final_Image_Format = "png"
                elif pathName == "ICO" and checkbox4.isChecked():
                        checkbox1.setChecked(False)
                        checkbox2.setChecked(False)
                        checkbox3.setChecked(False)
                        print("开启_导出ICO格式")
                        Final_Image_Format = "ico"
                else:
                        Final_Image_Format = "NULL"
                        print("开启_导出空格式")
        def OpenResolutionCheck(self,pathName,checkbox1,checkbox2,checkbox3,checkbox4,checkbox5):
                global Final_Image_Resolution
                global Image_Resolution
                if pathName == "128" and checkbox1.isChecked():
                        checkbox2.setChecked(False)
                        checkbox3.setChecked(False)
                        checkbox4.setChecked(False)
                        checkbox5.setChecked(False)
                        print("开启_分辨率设置为:128PX")
                        res = 128
                        Final_Image_Resolution = res
                        #Image_Resolution = res
                elif pathName == "256" and checkbox2.isChecked():
                        checkbox1.setChecked(False)
                        checkbox3.setChecked(False)
                        checkbox4.setChecked(False)
                        checkbox5.setChecked(False)
                        print("开启_分辨率设置为:256PX")
                        res = 256
                        Final_Image_Resolution = res
                        #Image_Resolution = res
                elif pathName == "512" and checkbox3.isChecked():
                        checkbox1.setChecked(False)
                        checkbox2.setChecked(False)
                        checkbox4.setChecked(False)
                        checkbox5.setChecked(False)
                        print("开启_分辨率设置为:512PX")
                        res = 512
                        Final_Image_Resolution = res
                        #Image_Resolution = res
                elif pathName == "1k" and checkbox4.isChecked():
                        checkbox1.setChecked(False)
                        checkbox2.setChecked(False)
                        checkbox3.setChecked(False)
                        checkbox5.setChecked(False)
                        print("开启_分辨率设置为:1K")
                        res = 1024
                        Final_Image_Resolution = res
                        #Image_Resolution = res
                elif pathName == "2k" and checkbox5.isChecked():
                        checkbox1.setChecked(False)
                        checkbox2.setChecked(False)
                        checkbox3.setChecked(False)
                        checkbox4.setChecked(False)
                        print("开启_分辨率设置为:2K")
                        res = 2048
                        Final_Image_Resolution = res
                        #Image_Resolution = res
                else:
                        #Image_Resolution = 1024
                        Final_Image_Resolution = 0
                        print("开启_分辨率设置为:0")

class NewLineEdit(QtWidgets.QLineEdit):
        def SetValue(self,value):
                self.setText(str(value))
        # def SetCustomResolution(self,Value):
        #         global Final_Image_ResolutionX,Final_Image_ResolutionY,Final_Image_Resolution
        #         Final_Image_Resolution = Value
        #         Final_Image_ResolutionX = Value
        #         Final_Image_ResolutionY = Value
        def SetOutPutPath(self):
                global Final_Image_Path
                Final_Image_Path = self.text()
        def SetOutPutName(self):
                global  Final_Image_Name
                Final_Image_Name =self.text()

class NewSlider(QtWidgets.QSlider):
        def __init__(self,*args, **kwargs):
                super().__init__(*args, **kwargs)
                self.setMinimum(0)
                self.setMaximum(100)
                self.setValue(0)
                self.setTickInterval(1)
                #self.slider.setTickPosition(QSlider.TicksBelow)
                #Create a QLabel widget
                #self.label = QLabel('0.0')
        def ChangeValue(self):
                value =self.value()
                print(value / 100)
                return value/100
                #self.label.setText('{:.1f}'.format(value / 100))

class NewPushButton(QtWidgets.QPushButton):
        #TODO 限制 如果图片为空 那么所有的按钮都无效
        def mousePressEvent(self, event):
                super().mousePressEvent(event) #复写
                # if event.buttons() == QtCore.Qt.LeftButton:  # 左键按下
                #         # print("鼠标左键单击")  # 响应测试语句
        #导出图片
        def OutPutTexture(self,path,name,resX,resY):
                global Final_Image_ResolutionX,Final_Image_ResolutionY,Final_Image_Resolution #输出纹理的分辨率
                global Final_Image_Path                                #输出纹理的路径
                global Final_Image_Format                              #输出纹理的格式
                global Final_Image_Name                                #输出纹理的名称
                global Fin_img_R,Fin_img_G,Fin_img_B,Fin_img_A,Final_Image         #输出纹理的纹理
                global R_Ready, G_Ready, B_Ready, A_Ready              #输出纹理的通道状态
                global Final_Image_Mode                                #输出纹理的模式
                global LOG

                UseCustomRes = False
                #判断命名
                if name != "":
                        Final_Image_Name = name
                else:
                        LOG = "名称空了 请给输出纹理命名？"
                        return

                #判断分辨率
                ResXisNum = str(resX).isdigit() #判断当前输入的字符串是数字
                ResYisNum = str(resY).isdigit() #判断当前输入的字符串是数字
                print("分辨率输出结果:{x}{y}".format(x=ResXisNum,y=ResYisNum))
                if resX != "" and resY != "":
                        if ResXisNum == True and ResYisNum == True:
                                UseCustomRes = True
                                print("给自定义分辨率赋值")
                                Final_Image_ResolutionX = int(resX)
                                Final_Image_ResolutionY = int(resY)
                        else:
                                UseCustomRes = False
                                LOG = "自定义分辨率输入的不合法输入全数字"
                                return

                else:
                        UseCustomRes =False   #自定义分辨率状态关闭
                        if Final_Image_Resolution == 0:
                                LOG = "分辨率没有勾选？ 请勾选输出纹理的分辨率"
                                return

                #判断路径
                if path != "":
                        Final_Image_Path = path
                else:
                        LOG = "路径空了 请给输出纹理选择路径？"
                        return
                #判断通道
                if R_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        r = ImageQt.fromqpixmap(Fin_img_R).getchannel(0)  # 获取通道
                        #r = ImageQt.fromqpixmap(QPixmap(Fin_img_R)).getchannel(0)  # 获取通道
                else :
                        LOG = "是不是急了点？请给输出纹理填入通道"
                        return
                if G_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        g = ImageQt.fromqpixmap(Fin_img_G).getchannel(0)  # 获取通道
                        #g = ImageQt.fromqpixmap(QPixmap(Fin_img_G)).getchannel(0)  # 获取通道
                if B_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        b = ImageQt.fromqpixmap(Fin_img_B).getchannel(0)  # 获取通道
                        #b = ImageQt.fromqpixmap(QPixmap(Fin_img_B)).getchannel(1)  # 获取通道
                if A_Ready ==True: # 获取通道 但是要判断下这个是否存在 否则会报错
                        a = ImageQt.fromqpixmap(Fin_img_A).getchannel(0)  # 获取通道
                        #a = ImageQt.fromqpixmap(QPixmap(Fin_img_A)).getchannel(0)  # 获取通道




                """01/ 判断路径是否为空"""
                print("输出成功名称:{name}  格式为:{format}  分辨率为:{res} 自定义分辨率({resx},{resy})  输出模式:{mode}".format(name=Final_Image_Name, format=Final_Image_Format,res=Final_Image_Resolution,resx=Final_Image_ResolutionX,resy=Final_Image_ResolutionY, mode=Final_Image_Mode))
                print("最终图片输出地址为：{path}/{name}.{format}".format(path=Final_Image_Path, name=Final_Image_Name,format=Final_Image_Format))
                Final_Image_Path = "{path}/{name}.{format}".format(path=Final_Image_Path, name=Final_Image_Name,format=Final_Image_Format)
                """02/ 判断格式是否为空 并且不同格式限制也不同"""
                if Final_Image_Format == "jpg": #MODE=RGB
                        if Final_Image_Mode == "RGB":
                                tempChannelBlend = [r, g, b]
                                OutPutTexture = Image.merge("RGB", tempChannelBlend)
                                if UseCustomRes == True:                                                                                #判断是否使用自定义分辨率
                                        OutPutTexture = OutPutTexture.resize((Final_Image_ResolutionX, Final_Image_ResolutionY))        #如果时自定义 将会使用X Y输入的自定义纹理
                                else:
                                        OutPutTexture = OutPutTexture.resize((Final_Image_Resolution,Final_Image_Resolution))           #如果不是自定义 将会使用Checkbox定义好的
                                OutPutTexture.save(Final_Image_Path)
                                LOG = "{name}.{format}导出成功".format(name=Final_Image_Name,format=Final_Image_Format)
                        else:
                                LOG = "JPG格式只支持三通道纹理 确认最终纹理通道"

                elif Final_Image_Format == "tga":  # MODE=RGBA
                        if Final_Image_Mode == "RGB":
                                tempChannelBlend = [r, g, b]
                                OutPutTexture = Image.merge("RGB", tempChannelBlend)
                                if UseCustomRes == True:                                                                                #判断是否使用自定义分辨率
                                        OutPutTexture = OutPutTexture.resize((Final_Image_ResolutionX, Final_Image_ResolutionY),resample=Image.LANCZOS)        #如果时自定义 将会使用X Y输入的自定义纹理
                                else:
                                        OutPutTexture = OutPutTexture.resize((Final_Image_Resolution,Final_Image_Resolution),resample=Image.LANCZOS)           #如果不是自定义 将会使用Checkbox定义好的
                                OutPutTexture.save(Final_Image_Path)
                                LOG = "{name}.{format}(24位)导出成功".format(name=Final_Image_Name,format=Final_Image_Format)
                        elif Final_Image_Mode == "RGBA":
                                tempChannelBlend = [r, g, b, a]
                                OutPutTexture = Image.merge("RGBA", tempChannelBlend)
                                if UseCustomRes == True:                                                                                #判断是否使用自定义分辨率
                                        resizeres = (Final_Image_ResolutionX, Final_Image_ResolutionY)
                                        OutPutTextureR = r.convert("L").resize(resizeres, resample=Image.LANCZOS)
                                        OutPutTextureG = g.convert("L").resize(resizeres, resample=Image.LANCZOS)
                                        OutPutTextureB = b.convert("L").resize(resizeres, resample=Image.LANCZOS)
                                        OutPutTextureA = a.convert("L").resize(resizeres, resample=Image.LANCZOS)
                                        OutPutTexture = Image.merge("RGBA",[OutPutTextureR, OutPutTextureG, OutPutTextureB,OutPutTextureA])
                                else:
                                        """这里之前出现了一个BUG resize 四通道纹理时 降低纹理分辨率会出现马赛克 后来将各个通道分开 分辨修改分辨率 最后合到一起解决问题"""
                                        #OutPutTexture = OutPutTexture.resize((Final_Image_Resolution,Final_Image_Resolution),resample=Image.LANCZOS)           #如果不是自定义 将会使用Checkbox定义好的
                                        resizeres = (Final_Image_Resolution, Final_Image_Resolution)
                                        OutPutTextureR = r.convert("L").resize(resizeres,resample=Image.LANCZOS)
                                        OutPutTextureG = g.convert("L").resize(resizeres,resample=Image.LANCZOS)
                                        OutPutTextureB = b.convert("L").resize(resizeres,resample=Image.LANCZOS)
                                        OutPutTextureA = a.convert("L").resize(resizeres,resample=Image.LANCZOS)
                                        OutPutTexture = Image.merge("RGBA", [OutPutTextureR, OutPutTextureG,OutPutTextureB,OutPutTextureA])

                                OutPutTexture.save(Final_Image_Path)
                                LOG = "{name}.{format}(32位)导出成功".format(name=Final_Image_Name,format=Final_Image_Format)
                        else:
                                LOG = "不合符TGA格式输出条件 使用RGB RGBA格式"

                elif Final_Image_Format == "png":  # MODE=RGBA
                        if Final_Image_Mode == "RGB":
                                tempChannelBlend = [r, g, b]
                                OutPutTexture = Image.merge("RGB", tempChannelBlend)
                                if UseCustomRes == True:                                                                                #判断是否使用自定义分辨率
                                        OutPutTexture = OutPutTexture.resize((Final_Image_ResolutionX, Final_Image_ResolutionY))        #如果时自定义 将会使用X Y输入的自定义纹理

                                else:
                                        OutPutTexture = OutPutTexture.resize((Final_Image_Resolution,Final_Image_Resolution))           #如果不是自定义 将会使用Checkbox定义好的
                                OutPutTexture.save(Final_Image_Path)
                                LOG = "{name}.{format}(24位)导出成功".format(name=Final_Image_Name,format=Final_Image_Format)
                        elif Final_Image_Mode == "RGBA":
                                tempChannelBlend = [r, g, b, a]
                                OutPutTexture = Image.merge("RGBA", tempChannelBlend)
                                if UseCustomRes == True:                                                                                #判断是否使用自定义分辨率
                                        OutPutTexture = OutPutTexture.resize((Final_Image_ResolutionX, Final_Image_ResolutionY))        #如果时自定义 将会使用X Y输入的自定义纹理

                                else:
                                        OutPutTexture = OutPutTexture.resize((Final_Image_Resolution,Final_Image_Resolution))           #如果不是自定义 将会使用Checkbox定义好的
                                OutPutTexture.save(Final_Image_Path)
                                LOG = "{name}.{format}(32位)纹理导出成功".format(name=Final_Image_Name,format=Final_Image_Format)
                        else:
                                LOG = "不合符PNG格式输出条件 使用RGB RGBA格式"

                elif Final_Image_Format == "ico":  # MODE=RGB
                        if Final_Image_Mode == "RGB":
                                tempChannelBlend = [r, g, b]
                                OutPutTexture = Image.merge("RGB", tempChannelBlend)
                                if UseCustomRes == True:                                                                                #判断是否使用自定义分辨率
                                        OutPutTexture = OutPutTexture.resize((Final_Image_ResolutionX, Final_Image_ResolutionY))        #如果时自定义 将会使用X Y输入的自定义纹理

                                else:
                                        OutPutTexture = OutPutTexture.resize((Final_Image_Resolution,Final_Image_Resolution))           #如果不是自定义 将会使用Checkbox定义好的
                                OutPutTexture.save(Final_Image_Path)
                                LOG = "{name}.{format}(24位)导出成功".format(name=Final_Image_Name,format=Final_Image_Format)
                        elif Final_Image_Mode == "RGBA":
                                tempChannelBlend = [r, g, b, a]
                                OutPutTexture = Image.merge("RGBA", tempChannelBlend)
                                if UseCustomRes == True:                                                                                #判断是否使用自定义分辨率
                                        OutPutTexture = OutPutTexture.resize((Final_Image_ResolutionX, Final_Image_ResolutionY))        #如果时自定义 将会使用X Y输入的自定义纹理

                                else:
                                        OutPutTexture = OutPutTexture.resize((Final_Image_Resolution,Final_Image_Resolution))           #如果不是自定义 将会使用Checkbox定义好的
                                OutPutTexture.save(Final_Image_Path)
                                LOG = "{name}.{format}(32位)导出成功".format(name=Final_Image_Name,format=Final_Image_Format)
                        else:
                                LOG = "不合符ICO格式输出条件 使用RGB RGBA格式"

                elif Final_Image_Format == "NULL":  # MODE=NULL
                        print("【错误0102】纹理格式format识别时没有赋值")
                        LOG = "没有选择纹理格式请勾选需要的输出格式~"

        #自定义文件路径
        def SetCustomFilePath(self):
                #path = QtWidgets.QFileDialog.getOpenFileName()  # 获取文件路径
                path = QtWidgets.QFileDialog.getExistingDirectory()#获取文件夹路径
                print("自定义导出路径为:",path)  # 输出选择的文件路径
                return path

class Newlabel(QtWidgets.QLabel):
        def __init__(self,*args, **kwargs):
                super().__init__(*args, **kwargs)
                self.Image_Path = ""
                self.isLeftPressed = bool(False)  # 图片被点住(鼠标左键)标志位
                self.isImgLabelArea = bool(True)
                self.imgPixmap = QPixmap(":/Icon/Icon/ADD2_480px.png")
                self.imgPixmap.scaled(self.size())
                self.img_R = QPixmap("")
                self.img_G = QPixmap("")
                self.img_B = QPixmap("")
                self.img_A = QPixmap("")
                self.isInImage = bool(False)

        def dragEnterEvent(self, event):
                # TODO 如果已经有文件了就不能再拖拽替换了(已经点击操作了) 【DONE】
                # TODO 图片文件格式限制 目前支持 PNG JPG TGA ICO 【DONE】
                # TODO FinalImage 限制拖拽
                global x
                if event.mimeData().hasUrls() and x<1:
                        urls = event.mimeData().urls()
                        if urls and urls[0].toString().endswith(".png"):
                                event.accept()
                        elif urls and urls[0].toString().endswith(".tga"):
                                event.accept()
                        elif urls and urls[0].toString().endswith(".jpg"):
                                event.accept()
                        elif urls and urls[0].toString().endswith(".ico"):
                                event.accept()
                        else:
                                event.ignore()
                else:
                        event.ignore()

        def dropEvent(self, event):
                urls = [u for u in event.mimeData().urls()]     #范围文件路径的Qt内部类型对象列表，由于支持多个文件同时拖入所以使用列表存放
                for url in urls:
                        if self.isInImage == bool(False):
                                print("01图片成功拖入:", self.isInImage)
                                self.Image_Path = url.path()[1:]
                                print("拖入文件路径:：",self.Image_Path)  #打印拖拽文件地址
                                self.Image_Path = os.path.dirname(url.path()[1:])  # 将Path目录向上一级
                                p01 = Image.open(url.path()[1:])       #加载拖拽的纹理
                                print("纹理信息:",p01)                  #获取拖入纹理信息
                                #———————————————————————————判断纹理模式——————————————————————————————————————————————————————————
                                if p01.mode == "RGBA":
                                        print("图片格式为:<RGBA>")           #反馈纹理格式
                                        r, g, b, a, =  p01.split()         #Pilow函数将图片通道分离
                                        Tmp = [r, g, b, a]                 #Pilow函数分配纹理颜色通道
                                elif p01.mode == "RGB":
                                        print("图片格式为:<RGB>")            #反馈纹理格式
                                        conp01 = p01.convert("RGBA")       #转换图片 将图片从RGB 转换RGBA
                                        r, g, b, a, = conp01.split()       #获取Alpha通道
                                        Tmp = [r, g, b, a]                 #Pilow函数分配纹理颜色通道
                                elif p01.mode == "L":
                                        print("图片格式为:<单通道灰度>")       #反馈纹理格式
                                        r, = p01.split()                   #Pilow函数将图片通道分离
                                        Tmp = [r, r, r, r]                 #Pilow函数  分配纹理颜色通道
                                # ———————————————————————————判断纹理模式——————————————————————————————————————————————————————————

                                # =============================================================================
                                # 图片输入阶段: 01.首先,加载纹理 需要排除掉除图片格式外其他的文件形式
                                #             02.判断输入进来的纹理的文件模式 1，L，P，RGB，RGBA，CMYK，YCbCr，I，F ;（会影响文件输出）
                                #             03.不同格式最后的输出通道不一致（JPGE3 ICON4 TGA4 PNG3 ）
                                # =============================================================================
                                p02 = Image.merge("RGBA", Tmp)
                                p02 = p02.resize((Image_Resolution,Image_Resolution,),resample=Image.BICUBIC)#拖入时图片插槽初始化 避免不同分辨率纹理合并报错
                                pilpixmap = ImageQt.toqpixmap(p02) # Pil转换成PixMap格式
                                self.imgPixmap = pilpixmap
                                self.setPixmap(self.imgPixmap)
                                self.isInImage = bool(True)
                                print("02图片成功拖入:", self.isInImage)
                                #将 Pil Image格式转换为QT Qpixmap
                                """这里将Image 转换为pixmap 提供给后面纹理混合使用"""
                                pil_r = ImageQt.toqpixmap(p02.getchannel(0))
                                self.img_R = QPixmap(pil_r)
                                pil_g = ImageQt.toqpixmap(p02.getchannel(1))
                                self.img_G = QPixmap(pil_g)
                                pil_b = ImageQt.toqpixmap(p02.getchannel(2))
                                self.img_B = QPixmap(pil_b)
                                pil_a = ImageQt.toqpixmap(p02.getchannel(3))
                                self.img_A = QPixmap(pil_a)
                                # =============================================================================
                                # 图片混合阶段: 首先,确定图片被点选(鼠标左键按下)且未左键释放;
                                #             其次,确定鼠标移动;
                                #             最后,更新偏移值,移动图片.
                                # =============================================================================
                        else:
                               print("哈哈哈 已经有纹理了 图片状态为可不可拖入状态为",self.isInImage)


        #TDOO 填装Final Image 通达函数
        def SetImgChannel(self,img,num,type,customnum):
                global Final_Image_Mode
                if num == 1:
                        print("#####——————————Final Image 通道R装填——————————#####")
                        global Fin_img_R
                        blacktex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='black')
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        blk = blacktex.getchannel(0)
                        white = whitetex.getchannel(0)
                        if type == "black":
                                Temp = [blk, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_R = QPixmap(ImageQt.toqpixmap(blacktex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "white":
                                Temp = [white, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_R = QPixmap(ImageQt.toqpixmap(whitetex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "custom":
                                num = int(customnum * 255)
                                Customtex = Image.new('RGB', (Image_Resolution, Image_Resolution), (num,num,num))
                                custom = Customtex.getchannel(0)
                                Fin_img_R = Customtex
                                Temp = [custom, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_R = QPixmap(ImageQt.toqpixmap(Customtex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        else:
                                Fin_img_R = img
                                Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                                r = Tmp_R.getchannel(0)
                                Temp = [r, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                #Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                self.setPixmap(pilpixmap)
                        global R_Ready
                        R_Ready = True
                        Final_Image_Mode = "R"
                elif num == 2:
                        print("#####——————————Final Image 通道G装填——————————#####")
                        global Fin_img_G
                        blacktex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='black')
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        blk = blacktex.getchannel(0)
                        white = whitetex.getchannel(0)
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        if type == "black":
                                Temp = [r, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_G = QPixmap(ImageQt.toqpixmap(blacktex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "white":
                                Temp = [r, white, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_G = QPixmap(ImageQt.toqpixmap(whitetex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "custom":
                                num = int(customnum * 255)
                                Customtex = Image.new('RGB', (Image_Resolution, Image_Resolution), (num, num, num))
                                custom = Customtex.getchannel(0)
                                Temp = [r, custom, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_G = QPixmap(ImageQt.toqpixmap(Customtex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        else:
                                Fin_img_G = img
                                Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                                g = Tmp_G.getchannel(0)
                                Temp = [r,g,blk,white]
                                Temp_Final = Image.merge("RGBA", Temp)
                               # Temp_Final = Temp_Final.resize((Image_Resolution,Image_Resolution))
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                self.setPixmap(pilpixmap)
                        global G_Ready
                        G_Ready = True
                        Final_Image_Mode = "RG"
                elif num == 3:
                        print("#####——————————Final Image 通道B装填——————————#####")
                        global Fin_img_B
                        blacktex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='black')
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        blk = blacktex.getchannel(0)
                        white = whitetex.getchannel(0)
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                        g = Tmp_G.getchannel(1)
                        if type == "black":
                                Temp = [r, g, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_B = QPixmap(ImageQt.toqpixmap(blacktex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "white":
                                Temp = [r, g, white, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_B = QPixmap(ImageQt.toqpixmap(whitetex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "custom":
                                num = int(customnum * 255)
                                Customtex = Image.new('RGB', (Image_Resolution, Image_Resolution), (num, num, num))
                                custom = Customtex.getchannel(0)
                                Temp = [r, g, custom, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_B = QPixmap(ImageQt.toqpixmap(Customtex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        else:
                                Fin_img_B = img
                                Tmp_B = ImageQt.fromqpixmap(Fin_img_B)
                                b = Tmp_B.getchannel(0)
                                Temp = [r, g, b, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                #Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                self.setPixmap(pilpixmap)
                        global B_Ready
                        B_Ready = True
                        Final_Image_Mode = "RGB"
                elif num == 4:
                        print("#####——————————Final Image 通道A装填——————————#####")
                        global Fin_img_A
                        blacktex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='black')
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        blk = blacktex.getchannel(0)
                        white = whitetex.getchannel(0)
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                        g = Tmp_G.getchannel(0)
                        Tmp_B = ImageQt.fromqpixmap(Fin_img_B)
                        b = Tmp_B.getchannel(0)
                        if type == "black":
                                Temp = [r, g, b, blk]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_A = QPixmap(ImageQt.toqpixmap(blacktex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "white":
                                Temp = [r, g, b, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_A = QPixmap(ImageQt.toqpixmap(whitetex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "custom":
                                num = int(customnum * 255)
                                Customtex = Image.new('RGB', (Image_Resolution, Image_Resolution), (num, num, num))
                                custom = Customtex.getchannel(0)
                                Temp = [r, g, b, custom]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_A = QPixmap(ImageQt.toqpixmap(Customtex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        else:
                                Fin_img_A = img
                                Tmp_A = ImageQt.fromqpixmap(Fin_img_A)
                                a = Tmp_A.getchannel(0)
                                Temp = [r, g, b, a]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                self.setPixmap(pilpixmap)
                        global A_Ready
                        A_Ready = True
                        Final_Image_Mode = "RGBA"
                elif num == 0:
                        print("错误01：你可能没有图片 完了点击了 请拖入图片")
                elif num == 5:
                        print("错误01：你已经操作完纹理了 不需要再操作了")
                        global LOG
                        LOG = "四个通道都已完成操作 可以导出了"
                else:
                        print("错误01：未知错误")
        #TODO 显示通道操作功能支持
        def ShowChannelResult(self,num):
                global A_Ready,B_Ready,G_Ready,R_Ready
                global x
                if x == 1 and R_Ready == True and num==1:
                        R_FinalChannelColor = (255,0,0)
                        self.setStyleSheet( "color: rgb{};\n"
                                        "background-color: rgba(200, 0, 0,80);\n"
                                        "border-bottom-right-radius:5px;".format(R_FinalChannelColor))
                elif x == 2 and G_Ready == True and num==2:

                        G_FinalChannelColor = (0,255,0)
                        self.setStyleSheet("color: rgb{};\n"
                                           "background-color: rgba(0, 200, 0,80);\n"
                                           "border-bottom-right-radius:5px;".format(G_FinalChannelColor))
                elif x == 3 and B_Ready == True and num==3:
                        B_FinalChannelColor = (0,0,255)
                        self.setStyleSheet("color: rgb{};\n"
                                           "background-color: rgba(0, 100, 255,160);\n"
                                           "border-bottom-right-radius:5px;".format(B_FinalChannelColor))
                elif x == 4 and A_Ready == True and num==4:
                        A_FinalChannelColor = "(255,255,0)"
                        self.setStyleSheet("color: rgb{};\n"
                                           "background-color: rgba(200, 200, 0,80);\n"
                                           "border-bottom-right-radius:5px;".format(A_FinalChannelColor))
                #else:
                     #print("错误02: 没有图片 或者")

        #TODO 将图片转为二进制
        def ConImgtobyte(self):
                pass
                global Final_Image_ResolutionX, Final_Image_ResolutionY, Final_Image_Resolution  # 输出纹理的分辨率
                global Final_Image_Format  # 输出纹理的格式
                global Final_Image_Name  # 输出纹理的名称
                global Fin_img_R, Fin_img_G, Fin_img_B, Fin_img_A  # 输出纹理的纹理
                global R_Ready, G_Ready, B_Ready, A_Ready  # 输出纹理的通道状态
                global Final_Image_Mode  # 输出纹理的模式
                global LOG
                img_bytes = io.BytesIO()
                img_format = ""
                if R_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        r = ImageQt.fromqpixmap(QPixmap(Fin_img_R)).getchannel(0)  # 获取通道
                else:
                        LOG = "是不是急了点？请给输出纹理填入通道"
                        return
                if G_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        g = ImageQt.fromqpixmap(QPixmap(Fin_img_G)).getchannel(0)  # 获取通道
                if B_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        b = ImageQt.fromqpixmap(QPixmap(Fin_img_B)).getchannel(1)  # 获取通道
                if A_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        a = ImageQt.fromqpixmap(QPixmap(Fin_img_A)).getchannel(1)  # 获取通道

                if Final_Image_Format == "tga":
                        img_format = "TGA"
                elif Final_Image_Format == "png":
                        img_format = "PNG"
                elif Final_Image_Format == "jpg":
                        img_format = "JPEG"
                elif Final_Image_Format == "ico":
                        img_format = "ICO"

                if Final_Image_Mode == "R":
                        tempChannelBlend = [r]
                        tempTexture = Image.merge("L", tempChannelBlend)
                        tempTexture.save(img_bytes,format= img_format)
                        path = img_bytes.getvalue()
                        LOG = "已将R图片的二进制复制到剪切板"
                elif Final_Image_Mode == "RG":
                        LOG = "当前通道不支持转换为二进制"
                        return
                elif Final_Image_Mode == "RGB":
                        tempChannelBlend = [r,g,b]
                        tempTexture = Image.merge("RGB", tempChannelBlend)
                        tempTexture.save(img_bytes, format="JPEG")
                        path = img_bytes.getvalue()
                        LOG = "已将RGB图片的二进制复制到剪切板"
                elif Final_Image_Mode == "RGBA":
                        tempChannelBlend = [r,g,b,a]
                        tempTexture = Image.merge("RGBA", tempChannelBlend)
                        if Final_Image_Format!= "jpg":
                                tempTexture.save(img_bytes, format= img_format)
                                path = img_bytes.getvalue()
                                LOG = "已将RGBA纹理的二进制复制到剪切板(格式为{s})".format(s=img_format)
                        else:
                                LOG = "图片格式和四通道不兼容"
                                return
                else:
                        LOG = "转换二进制需要勾选纹理格式"
                        return
                print(path)
                file_dir =   os.path.dirname(os.path.abspath(path))
                pyperclip.copy(str(path))

        #TODO 获取文件路径
        def GetPath(self):
                path = self.Image_Path
                file_dir = os.path.dirname(os.path.abspath(path))
                pyperclip.copy(file_dir)

        #TODO 获取当前通道数
        def getGlobalChannelNum(self):
                global x
                print("当前数量全局通道数为：", x)
                return x

        #TODO 设置通道数(点击按钮 增加一个通道数)
        def SetGlobalChannelNum(self):
                # TODO 限制GlobalChannelNum最大数为4 【DONE】
                print("准备加一")
                global x
                if x< 5:
                        x+=1
                        print("04成功加1")

        #TODO 清空全局通道为0
        def ClearGlobalChannelNum(self):
                global x
                global Final_Image_Mode
                x = 0
                global R_Ready,G_Ready,B_Ready,A_Ready
                R_Ready = False
                G_Ready = False
                B_Ready = False
                A_Ready = False
                Final_Image_Mode = "NULL"
                print("清空全局通道数 当前数量为：", x)
                global LOG
                LOG = "输出纹理通道已清空"

        #TODO 清空最终图片通道显示
        def ClearGlobalChannel(self):
                self.setStyleSheet("color: rgb(255,255,255);\n"
                                   "background-color: rgba(0, 0, 0,80);\n"
                                   "border-bottom-right-radius:5px;")

        #TODO 在Final Image上显示最终图片
        def ShowFinalImage(self,num):
                global R_Ready,G_Ready,B_Ready,A_Ready
                global LOG
                if num == 1 and R_Ready == True:
                        print("#####——————————Final Image 只显示R通道——————————#####")
                        global Fin_img_R
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        white = whitetex.getchannel(0)
                        Temp = [r, r, r, white]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution,Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "只显示R通道"
                elif num == 2 and G_Ready == True:
                        print("#####——————————Final Image 只显示G通道——————————#####")
                        global Fin_img_G
                        Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                        g = Tmp_G.getchannel(1)
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        white = whitetex.getchannel(0)
                        Temp = [g, g, g, white]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "只显示G通道"
                elif num == 3 and B_Ready == True:
                        print("#####——————————Final Image 只显示B通道——————————#####")
                        global Fin_img_B
                        Tmp_B = ImageQt.fromqpixmap(Fin_img_B)
                        b = Tmp_B.getchannel(2)
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        white = whitetex.getchannel(0)
                        Temp = [b, b, b, white]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "只显示B通道"
                elif num == 4 and A_Ready == True:
                        print("#####——————————Final Image 只显示A通道——————————#####")
                        global Final_Image
                        global Fin_img_A
                        Tmp_A = ImageQt.fromqpixmap(Fin_img_A)
                        a = Tmp_A.getchannel(2)
                        Temp = [a, a, a, a]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "只显示A通道"
                elif num == 5 and R_Ready == True and G_Ready == True and B_Ready == True and A_Ready == True:
                        print("#####——————————Final Image 只显示全通道——————————#####")
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                        g = Tmp_G.getchannel(0)
                        Tmp_B = ImageQt.fromqpixmap(Fin_img_B)
                        b = Tmp_B.getchannel(0)
                        Tmp_A = ImageQt.fromqpixmap(Fin_img_A)
                        a = Tmp_A.getchannel(0)
                        Temp = [r, g, b, a]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "显示所有通道"
                else:
                        LOG = "单独显示通道没有信息请指认"
                        print("单独显示通道为空")

        #TODO 清空图片
        def ClearImage(self,str):
                self.setPixmap(QtGui.QPixmap(str))

        #TODO 清空图像
        def isNoImage(self):
                self.isInImage = False
                print("03图片成功拖入:", self.isInImage)

        #TODO LOG设置
        def SetLog(self):
                global LOG
                global LOG_Opacity
                self.setText(LOG)

        #TODO 暂时不写 LOG会提示并且在一段时间后消音 需要引用时间相关函数
        # def UpdataLog(self):
        #        timer = QtCore.QTimer
        #        timer.timeout.connect(SetLog())
        #        timer.start(100)

class Newlabel2(QtWidgets.QLabel):
        def __init__(self,*args, **kwargs):
                super().__init__(*args, **kwargs)
                self.Image_Path = ""
                self.isLeftPressed = bool(False)  # 图片被点住(鼠标左键)标志位
                self.isImgLabelArea = bool(True)
                self.imgPixmap = QPixmap(":/Icon/Icon/ADD2_480px.png")
                self.imgPixmap.scaled(self.size())
                self.img_R = QPixmap("")
                self.img_G = QPixmap("")
                self.img_B = QPixmap("")
                self.img_A = QPixmap("")
                self.isInImage = bool(False)


        def SetImgChannel(self,img,num,type,customnum):
                global Final_Image_Mode
                if num == 1:
                        print("#####——————————Final Image 通道R装填——————————#####")
                        global Fin_img_R
                        blacktex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='black')
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        blk = blacktex.getchannel(0)
                        white = whitetex.getchannel(0)
                        if type == "black":
                                Temp = [blk, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_R = QPixmap(ImageQt.toqpixmap(blacktex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "white":
                                Temp = [white, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_R = QPixmap(ImageQt.toqpixmap(whitetex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "custom":
                                num = int(customnum * 255)
                                Customtex = Image.new('RGB', (Image_Resolution, Image_Resolution), (num,num,num))
                                custom = Customtex.getchannel(0)
                                Fin_img_R = Customtex
                                Temp = [custom, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_R = QPixmap(ImageQt.toqpixmap(Customtex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        else:
                                Fin_img_R = img
                                self.setPixmap(Fin_img_R)

                        global R_Ready
                        R_Ready = True
                        Final_Image_Mode = "R"
                elif num == 2:
                        print("#####——————————Final Image 通道G装填——————————#####")
                        global Fin_img_G
                        blacktex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='black')
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        blk = blacktex.getchannel(0)
                        white = whitetex.getchannel(0)
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        if type == "black":
                                Temp = [r, blk, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_G = QPixmap(ImageQt.toqpixmap(blacktex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "white":
                                Temp = [r, white, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_G = QPixmap(ImageQt.toqpixmap(whitetex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "custom":
                                num = int(customnum * 255)
                                Customtex = Image.new('RGB', (Image_Resolution, Image_Resolution), (num, num, num))
                                custom = Customtex.getchannel(0)
                                Temp = [r, custom, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_G = QPixmap(ImageQt.toqpixmap(Customtex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        else:
                                Fin_img_G = img
                                Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                                g = Tmp_G.getchannel(1)
                                Temp = [r,g,blk,white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                Temp_Final = Temp_Final.resize((Image_Resolution,Image_Resolution))
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                self.setPixmap(pilpixmap)
                        global G_Ready
                        G_Ready = True
                        Final_Image_Mode = "RG"
                elif num == 3:
                        print("#####——————————Final Image 通道B装填——————————#####")
                        global Fin_img_B
                        blacktex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='black')
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        blk = blacktex.getchannel(0)
                        white = whitetex.getchannel(0)
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                        g = Tmp_G.getchannel(1)
                        if type == "black":
                                Temp = [r, g, blk, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_B = QPixmap(ImageQt.toqpixmap(blacktex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "white":
                                Temp = [r, g, white, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_B = QPixmap(ImageQt.toqpixmap(whitetex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "custom":
                                num = int(customnum * 255)
                                Customtex = Image.new('RGB', (Image_Resolution, Image_Resolution), (num, num, num))
                                custom = Customtex.getchannel(0)
                                Temp = [r, g, custom, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_B = QPixmap(ImageQt.toqpixmap(Customtex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        else:
                                Fin_img_B = img
                                Tmp_B = ImageQt.fromqpixmap(Fin_img_B)
                                b = Tmp_B.getchannel(1)
                                Temp = [r, g, b, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                self.setPixmap(pilpixmap)
                        global B_Ready
                        B_Ready = True
                        Final_Image_Mode = "RGB"
                elif num == 4:
                        print("#####——————————Final Image 通道A装填——————————#####")
                        global Fin_img_A
                        blacktex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='black')
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        blk = blacktex.getchannel(0)
                        white = whitetex.getchannel(0)
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                        g = Tmp_G.getchannel(1)
                        Tmp_B = ImageQt.fromqpixmap(Fin_img_B)
                        b = Tmp_B.getchannel(1)
                        if type == "black":
                                Temp = [r, g, b, blk]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_A = QPixmap(ImageQt.toqpixmap(blacktex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "white":
                                Temp = [r, g, b, white]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_A = QPixmap(ImageQt.toqpixmap(whitetex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        elif type == "custom":
                                num = int(customnum * 255)
                                Customtex = Image.new('RGB', (Image_Resolution, Image_Resolution), (num, num, num))
                                custom = Customtex.getchannel(0)
                                Temp = [r, g, b, custom]
                                Temp_Final = Image.merge("RGBA", Temp)
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                Fin_img_A = QPixmap(ImageQt.toqpixmap(Customtex.getchannel(0)))  # 统一格式
                                self.setPixmap(pilpixmap)
                        else:
                                Fin_img_A = img
                                Tmp_A = ImageQt.fromqpixmap(Fin_img_A)
                                a = Tmp_A.getchannel(1)
                                Temp = [r, g, b, a]
                                Temp_Final = Image.merge("RGBA", Temp)
                                Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                                pilpixmap = ImageQt.toqpixmap(Temp_Final)
                                self.setPixmap(pilpixmap)
                        global A_Ready
                        A_Ready = True
                        Final_Image_Mode = "RGBA"
                elif num == 0:
                        print("错误01：你可能没有图片 完了点击了 请拖入图片")
                elif num == 5:
                        print("错误01：你已经操作完纹理了 不需要再操作了")
                        global LOG
                        LOG = "四个通道都已完成操作 可以导出了"
                else:
                        print("错误01：未知错误")

        def ShowChannelResult(self,num):
                global A_Ready,B_Ready,G_Ready,R_Ready
                global x
                if x == 1 and R_Ready == True and num==1:
                        R_FinalChannelColor = (255,0,0)
                        self.setStyleSheet( "color: rgb{};\n"
                                        "background-color: rgba(200, 0, 0,80);\n"
                                        "border-bottom-right-radius:5px;".format(R_FinalChannelColor))
                elif x == 2 and G_Ready == True and num==2:

                        G_FinalChannelColor = (0,255,0)
                        self.setStyleSheet("color: rgb{};\n"
                                           "background-color: rgba(0, 200, 0,80);\n"
                                           "border-bottom-right-radius:5px;".format(G_FinalChannelColor))
                elif x == 3 and B_Ready == True and num==3:
                        B_FinalChannelColor = (0,0,255)
                        self.setStyleSheet("color: rgb{};\n"
                                           "background-color: rgba(0, 100, 255,160);\n"
                                           "border-bottom-right-radius:5px;".format(B_FinalChannelColor))
                elif x == 4 and A_Ready == True and num==4:
                        A_FinalChannelColor = "(255,255,0)"
                        self.setStyleSheet("color: rgb{};\n"
                                           "background-color: rgba(200, 200, 0,80);\n"
                                           "border-bottom-right-radius:5px;".format(A_FinalChannelColor))
                #else:
                     #print("错误02: 没有图片 或者")

        def ConImgtobyte(self):
                pass
                global Final_Image_ResolutionX, Final_Image_ResolutionY, Final_Image_Resolution  # 输出纹理的分辨率
                global Final_Image_Format  # 输出纹理的格式
                global Final_Image_Name  # 输出纹理的名称
                global Fin_img_R, Fin_img_G, Fin_img_B, Fin_img_A  # 输出纹理的纹理
                global R_Ready, G_Ready, B_Ready, A_Ready  # 输出纹理的通道状态
                global Final_Image_Mode  # 输出纹理的模式
                global LOG
                img_bytes = io.BytesIO()
                img_format = ""
                if R_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        r = ImageQt.fromqpixmap(QPixmap(Fin_img_R)).getchannel(0)  # 获取通道
                else:
                        LOG = "是不是急了点？请给输出纹理填入通道"
                        return
                if G_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        g = ImageQt.fromqpixmap(QPixmap(Fin_img_G)).getchannel(0)  # 获取通道
                if B_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        b = ImageQt.fromqpixmap(QPixmap(Fin_img_B)).getchannel(1)  # 获取通道
                if A_Ready == True:  # 获取通道 但是要判断下这个是否存在 否则会报错
                        a = ImageQt.fromqpixmap(QPixmap(Fin_img_A)).getchannel(1)  # 获取通道

                if Final_Image_Format == "tga":
                        img_format = "TGA"
                elif Final_Image_Format == "png":
                        img_format = "PNG"
                elif Final_Image_Format == "jpg":
                        img_format = "JPEG"
                elif Final_Image_Format == "ico":
                        img_format = "ICO"

                if Final_Image_Mode == "R":
                        tempChannelBlend = [r]
                        tempTexture = Image.merge("L", tempChannelBlend)
                        tempTexture.save(img_bytes,format= img_format)
                        path = img_bytes.getvalue()
                        LOG = "已将R图片的二进制复制到剪切板"
                elif Final_Image_Mode == "RG":
                        LOG = "当前通道不支持转换为二进制"
                        return
                elif Final_Image_Mode == "RGB":
                        tempChannelBlend = [r,g,b]
                        tempTexture = Image.merge("RGB", tempChannelBlend)
                        tempTexture.save(img_bytes, format="JPEG")
                        path = img_bytes.getvalue()
                        LOG = "已将RGB图片的二进制复制到剪切板"
                elif Final_Image_Mode == "RGBA":
                        tempChannelBlend = [r,g,b,a]
                        tempTexture = Image.merge("RGBA", tempChannelBlend)
                        if Final_Image_Format!= "jpg":
                                tempTexture.save(img_bytes, format= img_format)
                                path = img_bytes.getvalue()
                                LOG = "已将RGBA纹理的二进制复制到剪切板(格式为{s})".format(s=img_format)
                        else:
                                LOG = "图片格式和四通道不兼容"
                                return
                else:
                        LOG = "转换二进制需要勾选纹理格式"
                        return
                print(path)
                file_dir = os.path.dirname(os.path.abspath(path))
                pyperclip.copy(str(path))
        def GetPath(self):
                path = self.Image_Path
                file_dir = os.path.dirname(os.path.abspath(path))
                pyperclip.copy(file_dir)

        def getGlobalChannelNum(self):
                global x
                print("当前数量全局通道数为：", x)
                return x

        def SetGlobalChannelNum(self):
                # TODO 限制GlobalChannelNum最大数为4 【DONE】
                print("准备加一")
                global x
                if x< 5:
                        x+=1
                        print("04成功加1")

        def ClearGlobalChannelNum(self):
                global x
                global Final_Image_Mode
                x = 0
                global R_Ready,G_Ready,B_Ready,A_Ready
                R_Ready = False
                G_Ready = False
                B_Ready = False
                A_Ready = False
                Final_Image_Mode = "NULL"
                print("清空全局通道数 当前数量为：", x)
                global LOG
                LOG = "输出纹理通道已清空"

        def ClearGlobalChannel(self):
                self.setStyleSheet("color: rgb(255,255,255);\n"
                                   "background-color: rgba(0, 0, 0,80);\n"
                                   "border-bottom-right-radius:5px;")

        def ShowFinalImage(self,num):
                global R_Ready,G_Ready,B_Ready,A_Ready
                global LOG
                if num == 1 and R_Ready == True:
                        print("#####——————————Final Image 只显示R通道——————————#####")
                        global Fin_img_R
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        white = whitetex.getchannel(0)
                        Temp = [r, r, r, white]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution,Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "只显示R通道"
                elif num == 2 and G_Ready == True:
                        print("#####——————————Final Image 只显示G通道——————————#####")
                        global Fin_img_G
                        Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                        g = Tmp_G.getchannel(1)
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        white = whitetex.getchannel(0)
                        Temp = [g, g, g, white]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "只显示G通道"
                elif num == 3 and B_Ready == True:
                        print("#####——————————Final Image 只显示B通道——————————#####")
                        global Fin_img_B
                        Tmp_B = ImageQt.fromqpixmap(Fin_img_B)
                        b = Tmp_B.getchannel(2)
                        whitetex = Image.new('RGB', (Image_Resolution, Image_Resolution), color='white')
                        white = whitetex.getchannel(0)
                        Temp = [b, b, b, white]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "只显示B通道"
                elif num == 4 and A_Ready == True:
                        print("#####——————————Final Image 只显示A通道——————————#####")
                        global Final_Image
                        global Fin_img_A
                        Tmp_A = ImageQt.fromqpixmap(Fin_img_A)
                        a = Tmp_A.getchannel(2)
                        Temp = [a, a, a, a]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "只显示A通道"
                elif num == 5 and R_Ready == True and G_Ready == True and B_Ready == True and A_Ready == True:
                        print("#####——————————Final Image 只显示全通道——————————#####")
                        Tmp_R = ImageQt.fromqpixmap(Fin_img_R)
                        r = Tmp_R.getchannel(0)
                        Tmp_G = ImageQt.fromqpixmap(Fin_img_G)
                        g = Tmp_G.getchannel(1)
                        Tmp_B = ImageQt.fromqpixmap(Fin_img_B)
                        b = Tmp_B.getchannel(1)
                        Tmp_A = ImageQt.fromqpixmap(Fin_img_A)
                        a = Tmp_A.getchannel(1)
                        Temp = [r, g, b, a]
                        Temp_Final = Image.merge("RGBA", Temp)
                        Temp_Final = Temp_Final.resize((Image_Resolution, Image_Resolution))
                        pilpixmap = ImageQt.toqpixmap(Temp_Final)
                        self.setPixmap(pilpixmap)
                        LOG = "显示所有通道"
                else:
                        LOG = "单独显示通道没有信息请指认"
                        print("单独显示通道为空")

        def ClearImage(self,str):
                self.setPixmap(QtGui.QPixmap(str))

        def isNoImage(self):
                self.isInImage = False
                print("03图片成功拖入:", self.isInImage)

        def SetLog(self):
                global LOG
                global LOG_Opacity
                self.setText(LOG)
        #TODO 暂时不写 LOG会提示并且在一段时间后消音 需要引用时间相关函数
        # def UpdataLog(self):
        #        timer = QtCore.QTimer
        #        timer.timeout.connect(SetLog())
        #        timer.start(100)



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1443, 730)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 10, 1391, 711))
        self.frame.setStyleSheet("background-color: rgb(48, 49, 52);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setContentsMargins(0, 0, 0, -1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.TopFrame = QtWidgets.QFrame(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.TopFrame.sizePolicy().hasHeightForWidth())
        self.TopFrame.setSizePolicy(sizePolicy)
        self.TopFrame.setStyleSheet("background-color: rgb(65, 66, 70);\n"
"")
        self.TopFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.TopFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.TopFrame.setObjectName("TopFrame")
        self.frame_4 = QtWidgets.QFrame(self.TopFrame)
        self.frame_4.setGeometry(QtCore.QRect(1190, -10, 200, 53))
        self.frame_4.setMinimumSize(QtCore.QSize(200, 0))
        self.frame_4.setStyleSheet("QPushButton{\n"
"    color: rgb(255, 255, 255);\n"
"    \n"
"border:none;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"padding-bottom:5px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_2.setContentsMargins(9, -1, -1, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.line_7 = QtWidgets.QFrame(self.frame_4)
        self.line_7.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.horizontalLayout_2.addWidget(self.line_7)
        self.pushButton_more = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_more.setStyleSheet("")
        self.pushButton_more.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icon/Icon/more_480px2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_more.setIcon(icon)
        self.pushButton_more.setObjectName("pushButton_more")
        self.horizontalLayout_2.addWidget(self.pushButton_more)
        self.line_6 = QtWidgets.QFrame(self.frame_4)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.horizontalLayout_2.addWidget(self.line_6)
        self.pushButton_minsize = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_minsize.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icon/Icon/minus_480px2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_minsize.setIcon(icon1)
        self.pushButton_minsize.setObjectName("pushButton_minsize")
        self.horizontalLayout_2.addWidget(self.pushButton_minsize)
        self.line_4 = QtWidgets.QFrame(self.frame_4)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.horizontalLayout_2.addWidget(self.line_4)
        self.pushButton = QtWidgets.QPushButton(self.frame_4)
        self.pushButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icon/Icon/Max_sign_4802px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon2)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.line_5 = QtWidgets.QFrame(self.frame_4)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.horizontalLayout_2.addWidget(self.line_5)
        self.pushButton_close = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_close.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Icon/Icon/delete_sign_4802px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_close.setIcon(icon3)
        self.pushButton_close.setObjectName("pushButton_close")
        self.horizontalLayout_2.addWidget(self.pushButton_close)
        self.label = QtWidgets.QLabel(self.TopFrame)
        self.label.setGeometry(QtCore.QRect(41, 2, 231, 33))
        font = QtGui.QFont()
        font.setFamily("Microsoft Yi Baiti")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);\n"
"color: rgb(210, 210, 210);\n"
"border-none\n"
"background-color: rgba(255, 255, 255,0);")
        self.label.setScaledContents(False)
        self.label.setObjectName("label")
        self.label_6 = QtWidgets.QLabel(self.TopFrame)
        self.label_6.setGeometry(QtCore.QRect(11, 10, 20, 20))
        self.label_6.setText("")
        self.label_6.setPixmap(QtGui.QPixmap(":/Icon/Icon/QT2"))
        self.label_6.setScaledContents(True)
        self.label_6.setObjectName("label_6")
        self.verticalLayout.addWidget(self.TopFrame)
        self.BottomFrame = QtWidgets.QFrame(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(35)
        sizePolicy.setHeightForWidth(self.BottomFrame.sizePolicy().hasHeightForWidth())
        self.BottomFrame.setSizePolicy(sizePolicy)
        self.BottomFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.BottomFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.BottomFrame.setObjectName("BottomFrame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.BottomFrame)
        self.horizontalLayout.setContentsMargins(-1, 0, 8, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_6 = QtWidgets.QFrame(self.BottomFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(7)
        sizePolicy.setHeightForWidth(self.frame_6.sizePolicy().hasHeightForWidth())
        self.frame_6.setSizePolicy(sizePolicy)
        self.frame_6.setStyleSheet("")
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_6)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_13 = QtWidgets.QFrame(self.frame_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_13.sizePolicy().hasHeightForWidth())
        self.frame_13.setSizePolicy(sizePolicy)
        self.frame_13.setStyleSheet("")
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.label_9 = QtWidgets.QLabel(self.frame_13)
        self.label_9.setGeometry(QtCore.QRect(14, -11, 831, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: rgb(199, 199, 199);")
        self.label_9.setObjectName("label_9")
        self.verticalLayout_3.addWidget(self.frame_13)
        self.frame_12 = QtWidgets.QFrame(self.frame_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(81)
        sizePolicy.setHeightForWidth(self.frame_12.sizePolicy().hasHeightForWidth())
        self.frame_12.setSizePolicy(sizePolicy)
        self.frame_12.setStyleSheet("")
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_12)
        self.gridLayout.setObjectName("gridLayout")
        self.F_Image_01 = QtWidgets.QFrame(self.frame_12)
        self.F_Image_01.setStyleSheet("#F_Image_01\n"
"{\n"
"background-color: rgb(30, 30, 30);\n"
"border-radius:7px;\n"
"}\n"
"")
        self.F_Image_01.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.F_Image_01.setFrameShadow(QtWidgets.QFrame.Raised)
        self.F_Image_01.setObjectName("F_Image_01")
        #修改::将QtWidgets.QLabel 替换为New Label类
        #self.Image01 = QtWidgets.QLabel(self.F_Image_01)
        self.Image01 = Newlabel(self.F_Image_01)
        self.Image01.setGeometry(QtCore.QRect(10, 10, 280, 280))
        self.Image01.setAcceptDrops(True)
        self.Image01.setStyleSheet("    border-radius:30px;\n"
"")
        self.Image01.setText("")
        self.Image01.setTextFormat(QtCore.Qt.AutoText)
        self.Image01.setPixmap(QtGui.QPixmap(":/Icon/Icon/ADD2_480px.png"))
        self.Image01.setScaledContents(True)
        self.Image01.setWordWrap(True)
        self.Image01.setObjectName("Image01")
        self.Image01_ButtonGroup = QtWidgets.QFrame(self.F_Image_01)
        self.Image01_ButtonGroup.setGeometry(QtCore.QRect(300, 10, 99, 281))
        self.Image01_ButtonGroup.setStyleSheet("QPushButton{\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"padding-bottom:5px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"#Image01_ButtonGroup{\n"
"    background-color: rgba(45, 45, 48,190);\n"
"    border-radius:10px;\n"
"}\n"
"\n"
"")
        self.Image01_ButtonGroup.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Image01_ButtonGroup.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Image01_ButtonGroup.setObjectName("Image01_ButtonGroup")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.Image01_ButtonGroup)
        self.verticalLayout_2.setContentsMargins(-1, 9, -1, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        #self.Image01_Button_R = QtWidgets.QPushButton(self.Image01_ButtonGroup)
        self.Image01_Button_R = NewPushButton(self.Image01_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image01_Button_R.setFont(font)
        self.Image01_Button_R.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image01_Button_R.setObjectName("Image01_Button_R")
        self.verticalLayout_2.addWidget(self.Image01_Button_R)
        self.Image01_Button_G = NewPushButton(self.Image01_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image01_Button_G.setFont(font)
        self.Image01_Button_G.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image01_Button_G.setObjectName("Image01_Button_G")
        self.verticalLayout_2.addWidget(self.Image01_Button_G)
        self.Image01_Button_B = NewPushButton(self.Image01_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image01_Button_B.setFont(font)
        self.Image01_Button_B.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image01_Button_B.setObjectName("Image01_Button_B")
        self.verticalLayout_2.addWidget(self.Image01_Button_B)
        self.Image01_Button_A = NewPushButton(self.Image01_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image01_Button_A.setFont(font)
        self.Image01_Button_A.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image01_Button_A.setObjectName("Image01_Button_A")
        self.verticalLayout_2.addWidget(self.Image01_Button_A)
        self.Image01_Button_Clear = QtWidgets.QPushButton(self.Image01_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Image01_Button_Clear.setFont(font)
        self.Image01_Button_Clear.setStyleSheet("background-color: rgb(203, 5, 8);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Image01_Button_Clear.setObjectName("Image01_Button_Clear")
        self.verticalLayout_2.addWidget(self.Image01_Button_Clear)
        self.Image01_Button_CopyPath = QtWidgets.QPushButton(self.Image01_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Image01_Button_CopyPath.setFont(font)
        self.Image01_Button_CopyPath.setStyleSheet("background-color: rgb(255, 170, 0);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Image01_Button_CopyPath.setObjectName("Image01_Button_CopyPath")
        self.verticalLayout_2.addWidget(self.Image01_Button_CopyPath)
        self.Image01_Label = QtWidgets.QLabel(self.F_Image_01)
        self.Image01_Label.setGeometry(QtCore.QRect(10, 9, 61, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.Image01_Label.setFont(font)
        self.Image01_Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgba(0, 0, 0,80);\n"
"border-bottom-right-radius:5px;")
        self.Image01_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Image01_Label.setObjectName("Image01_Label")
        self.gridLayout.addWidget(self.F_Image_01, 1, 0, 1, 1)
        self.line_2 = QtWidgets.QFrame(self.frame_12)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout.addWidget(self.line_2, 0, 0, 1, 2)
        self.F_Image_04 = QtWidgets.QFrame(self.frame_12)
        self.F_Image_04.setStyleSheet("#F_Image_04\n"
"{\n"
"background-color: rgb(30, 30, 30);\n"
"border-radius:7px;\n"
"}\n"
"")
        self.F_Image_04.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.F_Image_04.setFrameShadow(QtWidgets.QFrame.Raised)
        self.F_Image_04.setObjectName("F_Image_04")
        self.Image04_ButtonGroup = QtWidgets.QFrame(self.F_Image_04)
        self.Image04_ButtonGroup.setGeometry(QtCore.QRect(300, 10, 99, 281))
        self.Image04_ButtonGroup.setStyleSheet("QPushButton{\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"padding-bottom:5px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"#Image04_ButtonGroup{\n"
"    background-color: rgba(45, 45, 48,190);\n"
"    border-radius:10px;\n"
"}\n"
"\n"
"")
        self.Image04_ButtonGroup.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Image04_ButtonGroup.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Image04_ButtonGroup.setObjectName("Image04_ButtonGroup")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.Image04_ButtonGroup)
        self.verticalLayout_6.setContentsMargins(-1, 9, -1, -1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.Image04_Button_R = NewPushButton(self.Image04_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image04_Button_R.setFont(font)
        self.Image04_Button_R.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image04_Button_R.setObjectName("Image04_Button_R")
        self.verticalLayout_6.addWidget(self.Image04_Button_R)
        self.Image04_Button_G = NewPushButton(self.Image04_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image04_Button_G.setFont(font)
        self.Image04_Button_G.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image04_Button_G.setObjectName("Image04_Button_G")
        self.verticalLayout_6.addWidget(self.Image04_Button_G)
        self.Image04_Button_B = NewPushButton(self.Image04_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image04_Button_B.setFont(font)
        self.Image04_Button_B.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image04_Button_B.setObjectName("Image04_Button_B")
        self.verticalLayout_6.addWidget(self.Image04_Button_B)
        self.Image04_Button_A = NewPushButton(self.Image04_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image04_Button_A.setFont(font)
        self.Image04_Button_A.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image04_Button_A.setObjectName("Image04_Button_A")
        self.verticalLayout_6.addWidget(self.Image04_Button_A)
        self.Image04_Button_Clear = NewPushButton(self.Image04_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Image04_Button_Clear.setFont(font)
        self.Image04_Button_Clear.setStyleSheet("background-color: rgb(203, 5, 8);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Image04_Button_Clear.setObjectName("Image04_Button_Clear")
        self.verticalLayout_6.addWidget(self.Image04_Button_Clear)
        self.Image04_Button_CopyPath = NewPushButton(self.Image04_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Image04_Button_CopyPath.setFont(font)
        self.Image04_Button_CopyPath.setStyleSheet("background-color: rgb(255, 170, 0);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Image04_Button_CopyPath.setObjectName("Image04_Button_CopyPath")
        self.verticalLayout_6.addWidget(self.Image04_Button_CopyPath)
        #self.Image04 = QtWidgets.QLabel(self.F_Image_04)
        self.Image04 = Newlabel(self.F_Image_04)
        self.Image04.setGeometry(QtCore.QRect(10, 10, 280, 280))
        self.Image04.setAcceptDrops(True)
        self.Image04.setStyleSheet("    border-radius:30px;\n"
"")
        self.Image04.setText("")
        self.Image04.setTextFormat(QtCore.Qt.AutoText)
        self.Image04.setPixmap(QtGui.QPixmap(":/Icon/Icon/ADD2_480px.png"))
        self.Image04.setScaledContents(True)
        self.Image04.setWordWrap(True)
        self.Image04.setObjectName("Image04")
        self.Image04_Label = QtWidgets.QLabel(self.F_Image_04)
        self.Image04_Label.setGeometry(QtCore.QRect(10, 10, 61, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.Image04_Label.setFont(font)
        self.Image04_Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgba(0, 0, 0,80);\n"
"border-bottom-right-radius:5px;")
        self.Image04_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Image04_Label.setObjectName("Image04_Label")
        self.gridLayout.addWidget(self.F_Image_04, 2, 1, 1, 1)
        self.F_Image_02 = QtWidgets.QFrame(self.frame_12)
        self.F_Image_02.setStyleSheet("#F_Image_02\n"
"{\n"
"background-color: rgb(30, 30, 30);\n"
"border-radius:7px;\n"
"}\n"
"")
        self.F_Image_02.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.F_Image_02.setFrameShadow(QtWidgets.QFrame.Raised)
        self.F_Image_02.setObjectName("F_Image_02")
        # 修改::将QtWidgets.QLabel 替换为New Label类
        #self.Image02 = QtWidgets.QLabel(self.F_Image_02)
        self.Image02 = Newlabel(self.F_Image_02)
        self.Image02.setGeometry(QtCore.QRect(10, 10, 280, 280))
        self.Image02.setAcceptDrops(True)
        self.Image02.setStyleSheet("    border-radius:30px;\n"
"")
        self.Image02.setText("")
        self.Image02.setTextFormat(QtCore.Qt.AutoText)
        self.Image02.setPixmap(QtGui.QPixmap(":/Icon/Icon/ADD2_480px.png"))
        self.Image02.setScaledContents(True)
        self.Image02.setWordWrap(True)
        self.Image02.setObjectName("Image02")
        self.Image02_ButtonGroup = QtWidgets.QFrame(self.F_Image_02)
        self.Image02_ButtonGroup.setGeometry(QtCore.QRect(300, 10, 99, 281))
        self.Image02_ButtonGroup.setStyleSheet("QPushButton{\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"padding-bottom:5px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"#Image02_ButtonGroup{\n"
"    background-color: rgba(45, 45, 48,190);\n"
"    border-radius:10px;\n"
"}\n"
"\n"
"")
        self.Image02_ButtonGroup.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Image02_ButtonGroup.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Image02_ButtonGroup.setObjectName("Image02_ButtonGroup")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.Image02_ButtonGroup)
        self.verticalLayout_4.setContentsMargins(-1, 9, -1, -1)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        #self.Image02_Button_R = QtWidgets.QPushButton(self.Image02_ButtonGroup)
        self.Image02_Button_R = NewPushButton(self.Image02_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image02_Button_R.setFont(font)
        self.Image02_Button_R.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image02_Button_R.setObjectName("Image02_Button_R")
        self.verticalLayout_4.addWidget(self.Image02_Button_R)
        self.Image02_Button_G = NewPushButton(self.Image02_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image02_Button_G.setFont(font)
        self.Image02_Button_G.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image02_Button_G.setObjectName("Image02_Button_G")
        self.verticalLayout_4.addWidget(self.Image02_Button_G)
        self.Image02_Button_B = NewPushButton(self.Image02_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image02_Button_B.setFont(font)
        self.Image02_Button_B.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image02_Button_B.setObjectName("Image02_Button_B")
        self.verticalLayout_4.addWidget(self.Image02_Button_B)
        self.Image02_Button_A = QtWidgets.QPushButton(self.Image02_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image02_Button_A.setFont(font)
        self.Image02_Button_A.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image02_Button_A.setObjectName("Image02_Button_A")
        self.verticalLayout_4.addWidget(self.Image02_Button_A)
        self.Image02_Button_Clear = NewPushButton(self.Image02_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Image02_Button_Clear.setFont(font)
        self.Image02_Button_Clear.setStyleSheet("background-color: rgb(203, 5, 8);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Image02_Button_Clear.setObjectName("Image02_Button_Clear")
        self.verticalLayout_4.addWidget(self.Image02_Button_Clear)
        self.Image02_Button_CopyPath = NewPushButton(self.Image02_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Image02_Button_CopyPath.setFont(font)
        self.Image02_Button_CopyPath.setStyleSheet("background-color: rgb(255, 170, 0);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Image02_Button_CopyPath.setObjectName("Image02_Button_CopyPath")
        self.verticalLayout_4.addWidget(self.Image02_Button_CopyPath)
        self.Image02_Label = QtWidgets.QLabel(self.F_Image_02)
        self.Image02_Label.setGeometry(QtCore.QRect(10, 10, 61, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.Image02_Label.setFont(font)
        self.Image02_Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgba(0, 0, 0,80);\n"
"border-bottom-right-radius:5px;")
        self.Image02_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Image02_Label.setObjectName("Image02_Label")
        self.gridLayout.addWidget(self.F_Image_02, 1, 1, 1, 1)
        self.F_Image_03 = QtWidgets.QFrame(self.frame_12)
        self.F_Image_03.setStyleSheet("#F_Image_03\n"
"{\n"
"background-color: rgb(30, 30, 30);\n"
"border-radius:7px;\n"
"}\n"
"")
        self.F_Image_03.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.F_Image_03.setFrameShadow(QtWidgets.QFrame.Raised)
        self.F_Image_03.setObjectName("F_Image_03")
        # 修改::将QtWidgets.QLabel 替换为New Label类
        #self.Image03 = QtWidgets.QLabel(self.F_Image_03)
        self.Image03 = Newlabel(self.F_Image_03)
        self.Image03.setGeometry(QtCore.QRect(10, 10, 280, 280))
        self.Image03.setAcceptDrops(True)
        self.Image03.setStyleSheet("    border-radius:30px;\n"
"")
        self.Image03.setText("")
        self.Image03.setTextFormat(QtCore.Qt.AutoText)
        self.Image03.setPixmap(QtGui.QPixmap(":/Icon/Icon/ADD2_480px.png"))
        self.Image03.setScaledContents(True)
        self.Image03.setWordWrap(True)
        self.Image03.setObjectName("Image03")
        self.Image03_ButtonGroup = QtWidgets.QFrame(self.F_Image_03)
        self.Image03_ButtonGroup.setGeometry(QtCore.QRect(300, 10, 99, 281))
        self.Image03_ButtonGroup.setStyleSheet("QPushButton{\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"padding-bottom:5px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"#Image03_ButtonGroup{\n"
"    background-color: rgba(45, 45, 48,190);\n"
"    border-radius:10px;\n"
"}\n"
"\n"
"")
        self.Image03_ButtonGroup.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Image03_ButtonGroup.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Image03_ButtonGroup.setObjectName("Image03_ButtonGroup")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.Image03_ButtonGroup)
        self.verticalLayout_5.setContentsMargins(-1, 9, -1, -1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.Image03_Button_R = NewPushButton(self.Image03_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image03_Button_R.setFont(font)
        self.Image03_Button_R.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image03_Button_R.setObjectName("Image03_Button_R")
        self.verticalLayout_5.addWidget(self.Image03_Button_R)
        self.Image03_Button_G = NewPushButton(self.Image03_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image03_Button_G.setFont(font)
        self.Image03_Button_G.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image03_Button_G.setObjectName("Image03_Button_G")
        self.verticalLayout_5.addWidget(self.Image03_Button_G)
        self.Image03_Button_B = NewPushButton(self.Image03_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image03_Button_B.setFont(font)
        self.Image03_Button_B.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image03_Button_B.setObjectName("Image03_Button_B")
        self.verticalLayout_5.addWidget(self.Image03_Button_B)
        self.Image03_Button_A = NewPushButton(self.Image03_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.Image03_Button_A.setFont(font)
        self.Image03_Button_A.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Image03_Button_A.setObjectName("Image03_Button_A")
        self.verticalLayout_5.addWidget(self.Image03_Button_A)
        self.Image03_Button_Clear = NewPushButton(self.Image03_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Image03_Button_Clear.setFont(font)
        self.Image03_Button_Clear.setStyleSheet("background-color: rgb(203, 5, 8);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Image03_Button_Clear.setObjectName("Image03_Button_Clear")
        self.verticalLayout_5.addWidget(self.Image03_Button_Clear)
        self.Image03_Button_CopyPath = NewPushButton(self.Image03_ButtonGroup)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Image03_Button_CopyPath.setFont(font)
        self.Image03_Button_CopyPath.setStyleSheet("background-color: rgb(255, 170, 0);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Image03_Button_CopyPath.setObjectName("Image03_Button_CopyPath")
        self.verticalLayout_5.addWidget(self.Image03_Button_CopyPath)
        self.Image03_Label = QtWidgets.QLabel(self.F_Image_03)
        self.Image03_Label.setGeometry(QtCore.QRect(10, 10, 61, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.Image03_Label.setFont(font)
        self.Image03_Label.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgba(0, 0, 0,80);\n"
"border-bottom-right-radius:5px;")
        self.Image03_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Image03_Label.setObjectName("Image03_Label")
        self.gridLayout.addWidget(self.F_Image_03, 2, 0, 1, 1)
        self.verticalLayout_3.addWidget(self.frame_12)
        self.horizontalLayout.addWidget(self.frame_6)
        self.frame_5 = QtWidgets.QFrame(self.BottomFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(3)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.frame_5.sizePolicy().hasHeightForWidth())
        self.frame_5.setSizePolicy(sizePolicy)
        self.frame_5.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_5.setStyleSheet("#frame_5\n"
"{\n"
"background-color: rgb(65, 66, 70);\n"
"border-radius:15px;\n"
"}\n"
"")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.frame_2 = QtWidgets.QFrame(self.frame_5)
        self.frame_2.setGeometry(QtCore.QRect(5, 573, 501, 71))
        font = QtGui.QFont()
        font.setFamily("Wingdings")
        self.frame_2.setFont(font)
        self.frame_2.setStyleSheet("\n"
"QPushButton:hover{\n"
"padding-bottom:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"#frame_2\n"
"{\n"
"background-color: rgb(65, 66, 70);\n"
"}\n"
"\n"
"")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.Log = Newlabel(self.frame_2)
        self.Log.setGeometry(QtCore.QRect(10, 30, 301, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setBold(True)
        font.setWeight(75)
        self.Log.setFont(font)
        self.Log.setStyleSheet("background-color: rgba(90, 92, 97,0);\n"
                               "color:rgb(180, 255, 94);\n"
                               "border:none;")
        self.Log.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.Log.setObjectName("Log")
        #self.Export_Button_ExportTexture.setObjectName("Export_Button_ExportTexture")
        self.Export_Button_ExportTexture = NewPushButton(self.frame_2)
        self.Export_Button_ExportTexture.setGeometry(QtCore.QRect(318, 25, 178, 42))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.Export_Button_ExportTexture.setFont(font)
        self.Export_Button_ExportTexture.setStyleSheet("background-color: rgb(226, 63, 136);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Export_Button_ExportTexture.setObjectName("Export_Button_ExportTexture")
        self.frame_3 = QtWidgets.QFrame(self.frame_5)
        self.frame_3.setGeometry(QtCore.QRect(10, 450, 491, 41))
        self.frame_3.setStyleSheet("color: rgb(174, 174, 174);\n"
"background-color: rgb(88, 88, 88);\n"
"border-radius:5px;\n"
"")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.checkBox_Jpge = NewCheckBox(self.frame_3)
        self.checkBox_Jpge.setGeometry(QtCore.QRect(90, 10, 61, 16))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Jpge.setFont(font)
        self.checkBox_Jpge.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_Jpge.setObjectName("checkBox_Jpge")
        self.checkBox_Png = NewCheckBox(self.frame_3)
        self.checkBox_Png.setGeometry(QtCore.QRect(198, 10, 51, 16))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Png.setFont(font)
        self.checkBox_Png.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_Png.setObjectName("checkBox_Png")
        self.checkBox_Tga = NewCheckBox(self.frame_3)
        self.checkBox_Tga.setGeometry(QtCore.QRect(148, 10, 51, 16))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Tga.setFont(font)
        self.checkBox_Tga.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_Tga.setObjectName("checkBox_Tga")
        self.label_4 = QtWidgets.QLabel(self.frame_3)
        self.label_4.setGeometry(QtCore.QRect(5, 3, 81, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.checkBox_Ico = NewCheckBox(self.frame_3)
        self.checkBox_Ico.setGeometry(QtCore.QRect(249, 10, 51, 16))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Ico.setFont(font)
        self.checkBox_Ico.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_Ico.setObjectName("checkBox_Ico")
        self.line = QtWidgets.QFrame(self.frame_5)
        self.line.setGeometry(QtCore.QRect(10, 330, 471, 21))
        self.line.setStyleSheet("color: rgb(36, 36, 36);\n"
"")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.frame_7 = QtWidgets.QFrame(self.frame_5)
        self.frame_7.setGeometry(QtCore.QRect(10, 10, 491, 341))
        self.frame_7.setStyleSheet("\n"
"background-color: rgb(65, 66, 70);\n"
"\n"
"")
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        #self.Final_Image = QtWidgets.QLabel(self.frame_7)
        self.Final_Image = Newlabel(self.frame_7)
        self.Final_Image.setGeometry(QtCore.QRect(0, 20, 300, 300))
        self.Final_Image.setAcceptDrops(True)
        self.Final_Image.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(54, 54, 54);")
        self.Final_Image.setText("")
        self.Final_Image.setTextFormat(QtCore.Qt.AutoText)
        self.Final_Image.setPixmap(QtGui.QPixmap(":/Image/Icon/FinalImage_Max_sign_4802px.png"))
        self.Final_Image.setScaledContents(True)
        self.Final_Image.setWordWrap(True)
        self.Final_Image.setObjectName("Final_Image")
        self.frame_14 = QtWidgets.QFrame(self.frame_7)
        self.frame_14.setGeometry(QtCore.QRect(299, 9, 191, 341))
        self.frame_14.setStyleSheet("\n"
"QPushButton:hover{\n"
"padding-bottom:5px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}")
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        #self.Export_Button_ClearAllTexture = QtWidgets.QPushButton(self.frame_14)
        self.Export_Button_ClearAllTexture = NewPushButton(self.frame_14)
        self.Export_Button_ClearAllTexture.setGeometry(QtCore.QRect(87, 26, 101, 30))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_ClearAllTexture.setFont(font)
        self.Export_Button_ClearAllTexture.setStyleSheet("background-color: rgb(203, 5, 8);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Export_Button_ClearAllTexture.setObjectName("Export_Button_ClearAllTexture")
        self.horizontalSlider = NewSlider(self.frame_14)
        self.horizontalSlider.setGeometry(QtCore.QRect(10, 110, 141, 22))
        self.horizontalSlider.setStyleSheet("color: rgb(0, 255, 127);\n"
"")
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.lineEdit_2 = NewLineEdit(self.frame_14)
        self.lineEdit_2.setGeometry(QtCore.QRect(149, 103, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semilight")
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("background-color: rgb(65, 66, 70);\n"
"color: rgb(226, 226, 226);\n"
"border:none;")
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2.setPlaceholderText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.Name_Label = QtWidgets.QLabel(self.frame_14)
        self.Name_Label.setGeometry(QtCore.QRect(10, 240, 91, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        self.Name_Label.setFont(font)
        self.Name_Label.setStyleSheet("background-color: rgba(255, 255, 255,0);\n"
                                      "color: rgb(174, 174, 174);")
        self.Name_Label.setObjectName("Name_Label")
        self.Name_lineEdit = NewLineEdit(self.frame_14)
        self.Name_lineEdit.setGeometry(QtCore.QRect(10, 270, 181, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        self.Name_lineEdit.setFont(font)
        self.Name_lineEdit.setStyleSheet("background-color: rgb(90, 92, 97);\n"
                                         "color: rgb(217, 217, 217);\n"
                                         "border:none;")
        self.Name_lineEdit.setText("")
        self.Name_lineEdit.setObjectName("Name_lineEdit")

        self.Export_Button_PaintBlack = QtWidgets.QPushButton(self.frame_14)
        self.Export_Button_PaintBlack.setGeometry(QtCore.QRect(9, 66, 70, 30))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_PaintBlack.setFont(font)
        self.Export_Button_PaintBlack.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Export_Button_PaintBlack.setObjectName("Export_Button_PaintBlack")
        self.ConvertBinary = NewPushButton(self.frame_14)
        self.ConvertBinary.setGeometry(QtCore.QRect(7, 200, 181, 41))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.ConvertBinary.setFont(font)
        self.ConvertBinary.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.ConvertBinary.setObjectName("ConvertBinary")
        self.Export_Button_PaintCustomColor = QtWidgets.QPushButton(self.frame_14)
        self.Export_Button_PaintCustomColor.setGeometry(QtCore.QRect(9, 140, 181, 41))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_PaintCustomColor.setFont(font)
        self.Export_Button_PaintCustomColor.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Export_Button_PaintCustomColor.setObjectName("Export_Button_PaintCustomColor")
        self.Export_Button_PaintWhite = QtWidgets.QPushButton(self.frame_14)
        self.Export_Button_PaintWhite.setGeometry(QtCore.QRect(9, 26, 70, 30))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_PaintWhite.setFont(font)
        self.Export_Button_PaintWhite.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Export_Button_PaintWhite.setObjectName("Export_Button_PaintWhite")
        #self.Export_Button_ClearAllChannel = QtWidgets.QPushButton(self.frame_14)
        self.Export_Button_ClearAllChannel = NewPushButton(self.frame_14)
        self.Export_Button_ClearAllChannel.setGeometry(QtCore.QRect(87, 66, 101, 30))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_ClearAllChannel.setFont(font)
        self.Export_Button_ClearAllChannel.setStyleSheet("background-color: rgb(203, 5, 8);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Export_Button_ClearAllChannel.setObjectName("Export_Button_ClearAllChannel")
        self.Final_Image_Channel_A = Newlabel(self.frame_7)
        self.Final_Image_Channel_A.setGeometry(QtCore.QRect(160, -3, 21, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.Final_Image_Channel_A.setFont(font)
        self.Final_Image_Channel_A.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgba(0, 0, 0,80);\n"
"border-bottom-right-radius:5px;")
        self.Final_Image_Channel_A.setAlignment(QtCore.Qt.AlignCenter)
        self.Final_Image_Channel_A.setObjectName("Final_Image_Channel_A")
        self.label_5 = QtWidgets.QLabel(self.frame_7)
        self.label_5.setGeometry(QtCore.QRect(13, -2, 131, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(199, 199, 199);")
        self.label_5.setObjectName("label_5")
        self.Final_Image_Channel_B = Newlabel(self.frame_7)
        self.Final_Image_Channel_B.setGeometry(QtCore.QRect(140, -3, 21, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.Final_Image_Channel_B.setFont(font)
        self.Final_Image_Channel_B.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgba(0, 0, 0,80);\n"
"border-bottom-right-radius:5px;")
        self.Final_Image_Channel_B.setAlignment(QtCore.Qt.AlignCenter)
        self.Final_Image_Channel_B.setObjectName("Final_Image_Channel_B")
        self.Final_Image_Channel_G = Newlabel(self.frame_7)
        self.Final_Image_Channel_G.setGeometry(QtCore.QRect(120, -3, 21, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.Final_Image_Channel_G.setFont(font)
        self.Final_Image_Channel_G.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgba(0, 0, 0,80);\n"
"border-bottom-right-radius:5px;")
        self.Final_Image_Channel_G.setAlignment(QtCore.Qt.AlignCenter)
        self.Final_Image_Channel_G.setObjectName("Final_Image_Channel_G")
        self.Final_Image_Channel_R = Newlabel(self.frame_7)
        self.Final_Image_Channel_R.setGeometry(QtCore.QRect(100, -3, 21, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.Final_Image_Channel_R.setFont(font)
        #
        global R_FinalChannelColor
#         self.Final_Image_Channel_R.setStyleSheet("color: rgb(255, 255, 255);\n"
# "background-color: rgba(0, 0, 0,80);\n"
# "border-bottom-right-radius:5px;")

        self.Final_Image_Channel_R.setStyleSheet( "color: rgb(255, 255, 255);\n"
                                                 "background-color: rgba(0, 0, 0,80);\n"
                                                 "border-bottom-right-radius:5px;")
        self.Final_Image_Channel_R.setAlignment(QtCore.Qt.AlignCenter)
        self.Final_Image_Channel_R.setObjectName("Final_Image_Channel_R")
        self.frame_11 = QtWidgets.QFrame(self.frame_5)
        self.frame_11.setGeometry(QtCore.QRect(10, 500, 491, 81))
        self.frame_11.setStyleSheet("color: rgb(174, 174, 174);\n"
"background-color: rgb(88, 88, 88);\n"
"border-radius:5px;\n"
"")
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.pushButton_CustomPath = NewPushButton(self.frame_11)
        self.pushButton_CustomPath.setGeometry(QtCore.QRect(450, 60, 32, 16))
        self.pushButton_CustomPath.setStyleSheet("QPushButton:hover{\n"
                                                 "padding-bottom:5px;\n"
                                                 "}\n"
                                                 "\n"
                                                 "QPushButton:pressed{\n"
                                                 "padding-left:5px;\n"
                                                 "padding-top:5px;\n"
                                                 "}")
        self.pushButton_CustomPath.setText("")
        self.pushButton_CustomPath.setIcon(icon)
        self.pushButton_CustomPath.setObjectName("pushButton_CustomPath")
        self.lineEdit_CustomPath = NewLineEdit(self.frame_11)
        self.lineEdit_CustomPath.setGeometry(QtCore.QRect(10, 55, 431, 20))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semilight")
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_CustomPath.setFont(font)
        self.lineEdit_CustomPath.setStyleSheet("background-color: rgb(90, 92, 97);\n"
"border:none;")
        self.lineEdit_CustomPath.setObjectName("lineEdit_CustomPath")
        self.label_8 = QtWidgets.QLabel(self.frame_11)
        self.label_8.setGeometry(QtCore.QRect(4, 0, 81, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.checkBox_Use01Path = NewCheckBox(self.frame_11)
        self.checkBox_Use01Path.setGeometry(QtCore.QRect(5, 23, 121, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Use01Path.setFont(font)
        self.checkBox_Use01Path.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_Use01Path.setObjectName("checkBox_Use01Path")
        self.checkBox_Use02Path = NewCheckBox(self.frame_11)
        self.checkBox_Use02Path.setGeometry(QtCore.QRect(127, 23, 121, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Use02Path.setFont(font)
        self.checkBox_Use02Path.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_Use02Path.setObjectName("checkBox_Use02Path")
        self.checkBox_Use03Path = NewCheckBox(self.frame_11)
        self.checkBox_Use03Path.setGeometry(QtCore.QRect(247, 23, 121, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Use03Path.setFont(font)
        self.checkBox_Use03Path.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_Use03Path.setObjectName("checkBox_Use03Path")
        self.checkBox_Use04Path = NewCheckBox(self.frame_11)
        self.checkBox_Use04Path.setGeometry(QtCore.QRect(368, 23, 121, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Use04Path.setFont(font)
        self.checkBox_Use04Path.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_Use04Path.setObjectName("checkBox_Use04Path")
        self.frame_9 = QtWidgets.QFrame(self.frame_5)
        self.frame_9.setGeometry(QtCore.QRect(10, 400, 491, 41))
        self.frame_9.setStyleSheet("color: rgb(174, 174, 174);\n"
"background-color: rgb(88, 88, 88);\n"
"border-radius:5px;\n"
"")
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.frame_15 = QtWidgets.QFrame(self.frame_9)
        self.frame_15.setGeometry(QtCore.QRect(-4, 0, 304, 51))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.frame_15.setFont(font)
        self.frame_15.setStyleSheet("QPushButton{\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"padding-bottom:5px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"#frame_8{\n"
"    background-color: rgb(45, 45, 48);\n"
"    border-radius：5px;\n"
"}\n"
"#Frame_10\n"
"{\n"
"    background-color: rgb(84, 84, 84);\n"
"}\n"
"\n"
"")
        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_15.setObjectName("frame_15")
        self.label_11 = QtWidgets.QLabel(self.frame_9)
        self.label_11.setGeometry(QtCore.QRect(300, 7, 71, 33))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")

        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_15)
        self.horizontalLayout_4.setContentsMargins(-1, 9, -1, -1)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_10 = QtWidgets.QLabel(self.frame_15)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_4.addWidget(self.label_10)
        self.checkBox_128px = NewCheckBox(self.frame_15)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_128px.setFont(font)
        self.checkBox_128px.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_128px.setObjectName("checkBox_128px")
        self.horizontalLayout_4.addWidget(self.checkBox_128px)
        self.checkBox_256px = NewCheckBox(self.frame_15)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_256px.setFont(font)
        self.checkBox_256px.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_256px.setObjectName("checkBox_256px")
        self.horizontalLayout_4.addWidget(self.checkBox_256px)
        self.checkBox_512px = NewCheckBox(self.frame_15)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_512px.setFont(font)
        self.checkBox_512px.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_512px.setObjectName("checkBox_512px")
        self.horizontalLayout_4.addWidget(self.checkBox_512px)
        self.checkBox_1k = NewCheckBox(self.frame_15)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_1k.setFont(font)
        self.checkBox_1k.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_1k.setObjectName("checkBox_1k")
        self.horizontalLayout_4.addWidget(self.checkBox_1k)
        self.checkBox_2k = NewCheckBox(self.frame_15)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_2k.setFont(font)
        self.checkBox_2k.setStyleSheet("color: rgb(217, 217, 217);")
        self.checkBox_2k.setObjectName("checkBox_2k")
        self.horizontalLayout_4.addWidget(self.checkBox_2k)

        self.CustomResX_lineEdit = QtWidgets.QLineEdit(self.frame_9)
        self.CustomResX_lineEdit.setGeometry(QtCore.QRect(370, 12, 51, 22))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setBold(True)
        font.setWeight(75)
        self.CustomResX_lineEdit.setFont(font)
        self.CustomResX_lineEdit.setStyleSheet("background-color: rgb(90, 92, 97);\n"
                                               "color: rgb(217, 217, 217);\n"
                                               "border:none;")
        self.CustomResX_lineEdit.setText("")
        self.CustomResX_lineEdit.setObjectName("CustomResX_lineEdit")

        self.CustomResY_lineEdit = QtWidgets.QLineEdit(self.frame_9)
        self.CustomResY_lineEdit.setGeometry(QtCore.QRect(430, 12, 51, 22))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setBold(True)
        font.setWeight(75)
        self.CustomResY_lineEdit.setFont(font)
        self.CustomResY_lineEdit.setStyleSheet("background-color: rgb(90, 92, 97);\n"
                                               "color: rgb(217, 217, 217);\n"
                                               "border:none;")
        self.CustomResY_lineEdit.setText("")
        self.CustomResY_lineEdit.setObjectName("CustomResY_lineEdit")

        self.frame_8 = QtWidgets.QFrame(self.frame_5)
        self.frame_8.setGeometry(QtCore.QRect(10, 350, 491, 41))
        self.frame_8.setStyleSheet("color: rgb(174, 174, 174);\n"
"background-color: rgb(88, 88, 88);\n"
"border-radius:5px;\n"
"")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.frame_10 = QtWidgets.QFrame(self.frame_8)
        self.frame_10.setGeometry(QtCore.QRect(-4, 0, 291, 51))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.frame_10.setFont(font)
        self.frame_10.setStyleSheet("QPushButton{\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"padding-bottom:5px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"#frame_8{\n"
"    background-color: rgb(45, 45, 48);\n"
"    border-radius：5px;\n"
"}\n"
"#Frame_10\n"
"{\n"
"    background-color: rgb(84, 84, 84);\n"
"}\n"
"\n"
"")
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_10)
        self.horizontalLayout_3.setContentsMargins(-1, 9, -1, -1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_7 = QtWidgets.QLabel(self.frame_10)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_3.addWidget(self.label_7)
        self.Export_Button_CR = QtWidgets.QPushButton(self.frame_10)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_CR.setFont(font)
        self.Export_Button_CR.setStyleSheet("background-color: rgb(232, 50, 129);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;")
        self.Export_Button_CR.setObjectName("Export_Button_CR")
        self.horizontalLayout_3.addWidget(self.Export_Button_CR)
        self.Export_Button_CG = QtWidgets.QPushButton(self.frame_10)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_CG.setFont(font)
        self.Export_Button_CG.setStyleSheet("background-color: rgb(156, 232, 116);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Export_Button_CG.setObjectName("Export_Button_CG")
        self.horizontalLayout_3.addWidget(self.Export_Button_CG)
        self.Export_Button_CB = QtWidgets.QPushButton(self.frame_10)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_CB.setFont(font)
        self.Export_Button_CB.setStyleSheet("background-color: rgb(76, 76, 227);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Export_Button_CB.setObjectName("Export_Button_CB")
        self.horizontalLayout_3.addWidget(self.Export_Button_CB)
        self.Export_Button_CA = QtWidgets.QPushButton(self.frame_10)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_CA.setFont(font)
        self.Export_Button_CA.setStyleSheet("background-color: rgb(100, 102, 108);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"border-image: url(:/Image/Icon/bg_01px.png);")
        self.Export_Button_CA.setObjectName("Export_Button_CA")
        self.horizontalLayout_3.addWidget(self.Export_Button_CA)
        self.Export_Button_CAll = QtWidgets.QPushButton(self.frame_10)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.Export_Button_CAll.setFont(font)
        self.Export_Button_CAll.setStyleSheet("background-color: rgb(227, 205, 82);\n"
"border-radius:5px;\n"
"color: rgb(255, 255, 255);\n"
"bordert-radius: 5px;\n"
"")
        self.Export_Button_CAll.setObjectName("Export_Button_CAll")
        self.horizontalLayout_3.addWidget(self.Export_Button_CAll)
        self.horizontalLayout.addWidget(self.frame_5)
        self.verticalLayout.addWidget(self.BottomFrame)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.pushButton_close.clicked.connect(MainWindow.close)
        self.pushButton_minsize.clicked.connect(MainWindow.showMinimized)
        self.pushButton.clicked.connect(MainWindow.showMaximized)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "纹理混合工具<C'y>"))
        self.label.setText(_translate("MainWindow", "TEXTUR BLEND TOOLS Ver[1.0]"))
        self.label_9.setText(_translate("MainWindow", "合成纹理【01.拖拽图片】 【02.根据RGBA的顺序依次点击图片右侧的想要混合通道的按钮】【03.混合完成后点击导出纹理】"))
        self.Image01_Button_R.setText(_translate("MainWindow", "R"))
        self.Image01_Button_G.setText(_translate("MainWindow", "G"))
        self.Image01_Button_B.setText(_translate("MainWindow", "B"))
        self.Image01_Button_A.setText(_translate("MainWindow", "A"))
        self.Image01_Button_Clear.setText(_translate("MainWindow", "清除纹理"))
        self.Image01_Button_CopyPath.setText(_translate("MainWindow", "复制路径"))
        self.Image01_Label.setText(_translate("MainWindow", "图片01"))
        self.Image04_Button_R.setText(_translate("MainWindow", "R"))
        self.Image04_Button_G.setText(_translate("MainWindow", "G"))
        self.Image04_Button_B.setText(_translate("MainWindow", "B"))
        self.Image04_Button_A.setText(_translate("MainWindow", "A"))
        self.Image04_Button_Clear.setText(_translate("MainWindow", "清除纹理"))
        self.Image04_Button_CopyPath.setText(_translate("MainWindow", "复制路径"))
        self.Image04_Label.setText(_translate("MainWindow", "图片04"))
        self.Image02_Button_R.setText(_translate("MainWindow", "R"))
        self.Image02_Button_G.setText(_translate("MainWindow", "G"))
        self.Image02_Button_B.setText(_translate("MainWindow", "B"))
        self.Image02_Button_A.setText(_translate("MainWindow", "A"))
        self.Image02_Button_Clear.setText(_translate("MainWindow", "清除纹理"))
        self.Image02_Button_CopyPath.setText(_translate("MainWindow", "复制路径"))
        self.Image02_Label.setText(_translate("MainWindow", "图片02"))
        self.Image03_Button_R.setText(_translate("MainWindow", "R"))
        self.Image03_Button_G.setText(_translate("MainWindow", "G"))
        self.Image03_Button_B.setText(_translate("MainWindow", "B"))
        self.Image03_Button_A.setText(_translate("MainWindow", "A"))
        self.Image03_Button_Clear.setText(_translate("MainWindow", "清除纹理"))
        self.Image03_Button_CopyPath.setText(_translate("MainWindow", "复制路径"))
        self.Image03_Label.setText(_translate("MainWindow", "图片03"))
        self.Export_Button_ExportTexture.setText(_translate("MainWindow", "导出纹理"))
        self.checkBox_Jpge.setText(_translate("MainWindow", "JPEG"))
        self.checkBox_Png.setText(_translate("MainWindow", "PNG"))
        self.checkBox_Tga.setText(_translate("MainWindow", "TGA"))
        self.label_4.setText(_translate("MainWindow", "导出纹理格式:"))
        self.checkBox_Ico.setText(_translate("MainWindow", "ICO"))
        self.Export_Button_ClearAllTexture.setText(_translate("MainWindow", "清空所有纹理"))
        self.lineEdit_2.setText(_translate("MainWindow", "0.00"))
        self.Export_Button_PaintBlack.setText(_translate("MainWindow", "填充黑色"))
        self.ConvertBinary.setText(_translate("MainWindow", "将纹理转换为二进制"))
        self.Export_Button_PaintCustomColor.setText(_translate("MainWindow", "填充自定义颜色"))
        self.Export_Button_PaintWhite.setText(_translate("MainWindow", "填充白色"))
        self.Export_Button_ClearAllChannel.setText(_translate("MainWindow", "清空所有通道"))
        self.Final_Image_Channel_A.setText(_translate("MainWindow", "A"))
        self.label_5.setText(_translate("MainWindow", "导出纹理结果:"))
        self.Final_Image_Channel_B.setText(_translate("MainWindow", "B"))
        self.Final_Image_Channel_G.setText(_translate("MainWindow", "G"))
        self.Final_Image_Channel_R.setText(_translate("MainWindow", "R"))
        self.lineEdit_CustomPath.setPlaceholderText(_translate("MainWindow", "导出路径："))
        self.label_8.setText(_translate("MainWindow", "纹理导出设置"))
        self.checkBox_Use01Path.setText(_translate("MainWindow", "将01设为导出路径"))
        self.checkBox_Use02Path.setText(_translate("MainWindow", "将02设为导出路径"))
        self.checkBox_Use03Path.setText(_translate("MainWindow", "将03设为导出路径"))
        self.checkBox_Use04Path.setText(_translate("MainWindow", "将04设为导出路径"))
        self.label_10.setText(_translate("MainWindow", "纹理分辨率:"))
        self.checkBox_128px.setText(_translate("MainWindow", "128"))
        self.checkBox_256px.setText(_translate("MainWindow", "256"))
        self.checkBox_512px.setText(_translate("MainWindow", "512"))
        self.checkBox_1k.setText(_translate("MainWindow", "1K"))
        self.checkBox_2k.setText(_translate("MainWindow", "2K"))

        self.label_7.setText(_translate("MainWindow", "纹理通道显示:"))
        self.Export_Button_CR.setText(_translate("MainWindow", "R"))
        self.Export_Button_CG.setText(_translate("MainWindow", "G"))
        self.Export_Button_CB.setText(_translate("MainWindow", "B"))
        self.Export_Button_CA.setText(_translate("MainWindow", "A"))
        self.Export_Button_CAll.setText(_translate("MainWindow", "All"))
        self.Name_Label.setText(_translate("MainWindow", "纹理名称："))
        self.Name_lineEdit.setPlaceholderText(_translate("MainWindow", "纹理命名"))
        self.Log.setText(_translate("MainWindow", "01.拖拽图片02.点击通道03.选择格式导出"))
        self.label_11.setText(_translate("MainWindow", "自定分辨率："))
        self.CustomResX_lineEdit.setPlaceholderText(_translate("MainWindow", "X"))
        self.CustomResY_lineEdit.setPlaceholderText(_translate("MainWindow", "Y"))
import 纹理混合工具Icon图集_rc
